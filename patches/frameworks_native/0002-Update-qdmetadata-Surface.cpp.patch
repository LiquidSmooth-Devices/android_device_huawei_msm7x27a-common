From c9d65f004e49ab77bd7102787fcfb2abf9db17a8 Mon Sep 17 00:00:00 2001
From: Y300-0100 <bosko.brajovich@gmail.com>
Date: Tue, 29 Jul 2014 21:07:02 +0200
Subject: [PATCH 2/2] Update Surface.cpp

---
 libs/gui/Surface.cpp |   66 +++++++++++++++++++-------------------------------
 1 file changed, 25 insertions(+), 41 deletions(-)

diff --git a/libs/gui/Surface.cpp b/libs/gui/Surface.cpp
index 70e2ac1..b699fed 100644
--- a/libs/gui/Surface.cpp
+++ b/libs/gui/Surface.cpp
@@ -36,11 +36,8 @@
 
 #ifdef QCOM_BSP
 #include <gralloc_priv.h>
-#include <qdMetaData.h>
-#ifdef VFM_AVAILABLE
-#include "vfm_metadata.h"
-#endif //VFM_AVAILABLE
 #endif
+
 namespace android {
 
 Surface::Surface(
@@ -71,6 +68,9 @@ Surface::Surface(
     mReqSize = 0;
     mTimestamp = NATIVE_WINDOW_TIMESTAMP_AUTO;
     mCrop.clear();
+#ifdef QCOM_BSP
+    mDirtyRect.clear();
+#endif
     mScalingMode = NATIVE_WINDOW_SCALING_MODE_FREEZE;
     mTransform = 0;
     mDefaultWidth = 0;
@@ -85,7 +85,6 @@ Surface::Surface(
 #ifdef SURFACE_SKIP_FIRST_DEQUEUE
     mDequeuedOnce = false;
 #endif
-    mDequeueIdx = 0;
 }
 
 Surface::~Surface() {
@@ -173,17 +172,13 @@ int Surface::hook_perform(ANativeWindow* window, int operation, ...) {
     return c->perform(operation, args);
 }
 
-int Surface::setDirtyRegion(Region* inOutDirtyRegion) {
-    Rect dirty;
-    if(inOutDirtyRegion)
-         dirty = inOutDirtyRegion->getBounds();
+#ifdef QCOM_BSP
+status_t Surface::setDirtyRect(const Rect* dirtyRect) {
     Mutex::Autolock lock(mMutex);
-    status_t res = mGraphicBufferProducer->updateDirtyRegion(mDequeueIdx,
-                                      dirty.left, dirty.top, dirty.right,
-                                      dirty.bottom);
-    return res;
+    mDirtyRect = *dirtyRect;
+    return NO_ERROR;
 }
-
+#endif
 
 int Surface::setSwapInterval(int interval) {
     ATRACE_CALL();
@@ -218,9 +213,6 @@ int Surface::dequeueBuffer(android_native_buffer_t** buffer, int* fenceFd) {
              result);
         return result;
     }
-
-    mDequeueIdx = buf;
-
     sp<GraphicBuffer>& gbuf(mSlots[buf].buffer);
 
     // this should never happen
@@ -307,27 +299,6 @@ int Surface::queueBuffer(android_native_buffer_t* buffer, int fenceFd) {
     } else {
         timestamp = mTimestamp;
     }
-#ifdef QCOM_BSP
-#ifdef VFM_AVAILABLE
-    /* Add a session ID while queuing the buffers to maintain session
-       association */
-    {
-        int nErr;
-        private_handle_t* pBufPrvtHandle = (private_handle_t*)buffer->handle;
-
-        VfmMetaData_t vfmMetaData;
-        memset(&vfmMetaData, 0, sizeof(VfmMetaData_t));
-
-        vfmMetaData.type = VFM_SESSION_ID;
-        vfmMetaData.sessionId =
-            reinterpret_cast<int>(mGraphicBufferProducer.get());
-        nErr = setMetaData(pBufPrvtHandle, PP_PARAM_VFM_DATA,
-            (void*)&vfmMetaData);
-        if(0 != nErr)
-            ALOGE("Error:%d in setMetaData PP_PARAM_SESSIONID", nErr);
-   }
-#endif
-#endif
     int i = getSlotFromBufferLocked(buffer);
     if (i < 0) {
         return i;
@@ -338,10 +309,19 @@ int Surface::queueBuffer(android_native_buffer_t* buffer, int fenceFd) {
     Rect crop;
     mCrop.intersect(Rect(buffer->width, buffer->height), &crop);
 
+#ifdef QCOM_BSP
+    Rect dirtyRect = mDirtyRect.isEmpty() ?
+        Rect(buffer->width, buffer->height) : mDirtyRect;
+#endif
+
     sp<Fence> fence(fenceFd >= 0 ? new Fence(fenceFd) : Fence::NO_FENCE);
     IGraphicBufferProducer::QueueBufferOutput output;
     IGraphicBufferProducer::QueueBufferInput input(timestamp, isAutoTimestamp,
-            crop, mScalingMode, mTransform, mSwapIntervalZero, fence);
+            crop,
+#ifdef QCOM_BSP
+            dirtyRect,
+#endif
+            mScalingMode, mTransform, mSwapIntervalZero,fence);
     status_t err = mGraphicBufferProducer->queueBuffer(i, input, &output);
     if (err != OK)  {
         ALOGE("queueBuffer: error queuing buffer to SurfaceTexture, %d", err);
@@ -351,7 +331,9 @@ int Surface::queueBuffer(android_native_buffer_t* buffer, int fenceFd) {
             &numPendingBuffers);
 
     mConsumerRunningBehind = (numPendingBuffers >= 2);
-
+#ifdef QCOM_BSP
+    mDirtyRect.clear();
+#endif
     return err;
 }
 
@@ -897,7 +879,9 @@ status_t Surface::lock(
 
         { // scope for the lock
             Mutex::Autolock lock(mMutex);
-            mSlots[backBufferSlot].dirtyRegion = newDirtyRegion;
+            if (backBufferSlot >= 0) {
+               mSlots[backBufferSlot].dirtyRegion = newDirtyRegion;
+            }
         }
 
         if (inOutDirtyBounds) {
-- 
1.7.9.5
